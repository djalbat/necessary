"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports.default = void 0;
var _constants = require("../constants");
var _methods = require("../methods");
var _contentTypes = require("../contentTypes");
var _http = require("../utilities/http");
function get(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.GET_METHOD, body = null;
    underwriteAccept(headers);
    request(host, uri, query, method, headers, body, callback);
}
function post(host, uri, query, headers, body, callback) {
    if (callback === undefined) {
        callback = body;
        body = headers;
        headers = {
        };
    }
    var method = _methods.POST_METHOD;
    underwriteAccept(headers);
    underwriteContentType(headers);
    request(host, uri, query, method, headers, body, callback);
}
function request(host, uri, query, method, headers, body1, callback) {
    var url = (0, _http).urlFromHostURIAndQuery(host, uri, query), accept = headers[_constants.ACCEPT] || null, contentType = headers[_constants.CONTENT_TYPE] || null, xmlHttpRequest = new XMLHttpRequest();
    if (contentType === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
        var json = body1, jsonString = JSON.stringify(json);
        body1 = jsonString; ///
    }
    xmlHttpRequest.onreadystatechange = function() {
        var readyState = xmlHttpRequest.readyState, status = xmlHttpRequest.status, responseText = xmlHttpRequest.responseText;
        if (readyState == 4) {
            var body = responseText;
            if (accept === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
                try {
                    var jsonString = body, json = JSON.parse(jsonString);
                    body = json; ///
                } catch (error) {
                    body = null;
                }
                callback(body, status);
            }
        }
    };
    xmlHttpRequest.open(method, url);
    if (accept !== null) {
        xmlHttpRequest.setRequestHeader(_constants.ACCEPT, accept);
    }
    if (contentType !== null) {
        xmlHttpRequest.setRequestHeader(_constants.CONTENT_TYPE, contentType);
    }
    body1 !== null ? xmlHttpRequest.send(body1) : xmlHttpRequest.send();
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;
function underwriteAccept(headers) {
    var name = _constants.ACCEPT, value = _contentTypes.APPLICATION_JSON_CONTENT_TYPE; ///
    (0, _http).underwrite(headers, name, value);
}
function underwriteContentType(headers) {
    var name = _constants.CONTENT_TYPE, value = _contentTypes.APPLICATION_JSON_CONTENT_TYPE; ///
    (0, _http).underwrite(headers, name, value);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYWpheC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQUNDRVBULCBDT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBHRVRfTUVUSE9ELCBQT1NUX01FVEhPRCB9IGZyb20gXCIuLi9tZXRob2RzXCI7XG5pbXBvcnQgeyBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi9jb250ZW50VHlwZXNcIjtcbmltcG9ydCB7IHVuZGVyd3JpdGUsIHVybEZyb21Ib3N0VVJJQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2h0dHBcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldChob3N0LCB1cmksIHF1ZXJ5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gaGVhZGVyczsgLy8vXG4gICAgaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IG51bGw7XG5cbiAgdW5kZXJ3cml0ZUFjY2VwdChoZWFkZXJzKTtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHF1ZXJ5LCBoZWFkZXJzLCBib2R5LCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gYm9keTtcbiAgICBib2R5ID0gaGVhZGVycztcbiAgICBoZWFkZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBQT1NUX01FVEhPRDtcblxuICB1bmRlcndyaXRlQWNjZXB0KGhlYWRlcnMpO1xuXG4gIHVuZGVyd3JpdGVDb250ZW50VHlwZShoZWFkZXJzKTtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdChob3N0LCB1cmksIHF1ZXJ5LCBtZXRob2QsIGhlYWRlcnMsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0VVJJQW5kUXVlcnkoaG9zdCwgdXJpLCBxdWVyeSksXG4gICAgICAgIGFjY2VwdCA9IGhlYWRlcnNbQUNDRVBUXSB8fCBudWxsLFxuICAgICAgICBjb250ZW50VHlwZSA9IGhlYWRlcnNbQ09OVEVOVF9UWVBFXSB8fCBudWxsLFxuICAgICAgICB4bWxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIGlmIChjb250ZW50VHlwZSA9PT0gQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEUpIHtcbiAgICBjb25zdCBqc29uID0gYm9keSwgIC8vL1xuICAgICAgICAgIGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICAgIGJvZHkgPSBqc29uU3RyaW5nOyAgLy8vXG4gIH1cblxuICB4bWxIdHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZWFkeVN0YXRlLCBzdGF0dXMsIHJlc3BvbnNlVGV4dCB9ID0geG1sSHR0cFJlcXVlc3Q7XG5cbiAgICBpZiAocmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICBsZXQgYm9keSA9IHJlc3BvbnNlVGV4dDtcblxuICAgICAgaWYgKGFjY2VwdCA9PT0gQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBqc29uU3RyaW5nID0gYm9keSwgIC8vL1xuICAgICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuXG4gICAgICAgICAgYm9keSA9IGpzb247ICAvLy9cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBib2R5ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGJvZHksIHN0YXR1cyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9wZW4obWV0aG9kLCB1cmwpO1xuXG4gIGlmIChhY2NlcHQgIT09IG51bGwpIHtcbiAgICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKEFDQ0VQVCwgYWNjZXB0KTtcbiAgfVxuXG4gIGlmIChjb250ZW50VHlwZSAhPT0gbnVsbCkge1xuICAgIHhtbEh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoQ09OVEVOVF9UWVBFLCBjb250ZW50VHlwZSk7XG4gIH1cblxuICAoYm9keSAhPT0gbnVsbCkgP1xuICAgIHhtbEh0dHBSZXF1ZXN0LnNlbmQoYm9keSkgOlxuICAgICAgeG1sSHR0cFJlcXVlc3Quc2VuZCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldCxcbiAgcG9zdCxcbiAgcmVxdWVzdFxufVxuXG5mdW5jdGlvbiB1bmRlcndyaXRlQWNjZXB0KGhlYWRlcnMpIHtcbiAgY29uc3QgbmFtZSA9IEFDQ0VQVCwgIC8vL1xuICAgICAgICB2YWx1ZSA9IEFQUExJQ0FUSU9OX0pTT05fQ09OVEVOVF9UWVBFOyAvLy9cblxuICB1bmRlcndyaXRlKGhlYWRlcnMsIG5hbWUsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdW5kZXJ3cml0ZUNvbnRlbnRUeXBlKGhlYWRlcnMpIHtcbiAgY29uc3QgbmFtZSA9IENPTlRFTlRfVFlQRSwgIC8vL1xuICAgICAgICB2YWx1ZSA9IEFQUExJQ0FUSU9OX0pTT05fQ09OVEVOVF9UWVBFOyAvLy9cblxuICB1bmRlcndyaXRlKGhlYWRlcnMsIG5hbWUsIHZhbHVlKTtcbn1cbiJdLCJuYW1lcyI6WyJnZXQiLCJwb3N0IiwicmVxdWVzdCIsImhvc3QiLCJ1cmkiLCJxdWVyeSIsImhlYWRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsImJvZHkiLCJ1bmRlcndyaXRlQWNjZXB0IiwidW5kZXJ3cml0ZUNvbnRlbnRUeXBlIiwidXJsIiwiYWNjZXB0IiwiY29udGVudFR5cGUiLCJ4bWxIdHRwUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwianNvbiIsImpzb25TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsInBhcnNlIiwiZXJyb3IiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJuYW1lIiwidmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7UUFPSUEsR0FBRyxHQUFIQSxHQUFHO1FBY0hDLElBQUksR0FBSkEsSUFBSTtRQWdCSkMsT0FBTyxHQUFQQSxPQUFPOztBQW5DYyxHQUFjLENBQWQsVUFBYztBQUNYLEdBQVksQ0FBWixRQUFZO0FBQ04sR0FBaUIsQ0FBakIsYUFBaUI7QUFDWixHQUFtQixDQUFuQixLQUFtQjtTQUV0REYsR0FBRyxDQUFDRyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ3hELEVBQUUsRUFBRUEsUUFBUSxLQUFLQyxTQUFTLEVBQUUsQ0FBQztRQUMzQkQsUUFBUSxHQUFHRCxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQ3ZCQSxPQUFPLEdBQUcsQ0FBQztRQUFBLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBSyxDQUFDRyxNQUFNLEdBVjBCLFFBQVksYUFXNUNDLElBQUksR0FBRyxJQUFJO0lBRWpCQyxnQkFBZ0IsQ0FBQ0wsT0FBTztJQUV4QkosT0FBTyxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFSSxNQUFNLEVBQUVILE9BQU8sRUFBRUksSUFBSSxFQUFFSCxRQUFRO0FBQzNELENBQUM7U0FFZU4sSUFBSSxDQUFDRSxJ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