"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports.default = void 0;
var _constants = require("../constants");
var _methods = require("../methods");
var _contentTypes = require("../contentTypes");
var _http = require("../utilities/http");
function get(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.GET_METHOD, body = null;
    underwriteAccept(headers);
    request(host, uri, query, method, body, headers, callback);
}
function post(host, uri, query, body, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.POST_METHOD;
    underwriteAccept(headers);
    underwriteContentType(headers);
    request(host, uri, query, method, body, headers, callback);
}
function request(host, uri, query, method, body1, headers, callback) {
    var url = (0, _http).urlFromHostURIAndQuery(host, uri, query), accept = headers[_constants.ACCEPT] || null, contentType = headers[_constants.CONTENT_TYPE] || null, xmlHttpRequest = new XMLHttpRequest();
    if (contentType === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
        var json = body1, jsonString = JSON.stringify(json);
        body1 = jsonString; ///
    }
    xmlHttpRequest.onreadystatechange = function() {
        var readyState = xmlHttpRequest.readyState, status = xmlHttpRequest.status, responseText = xmlHttpRequest.responseText;
        if (readyState == 4) {
            var body = responseText;
            if (accept === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
                try {
                    var jsonString = body, json = JSON.parse(jsonString);
                    body = json; ///
                } catch (error) {
                    body = null;
                }
                callback(body, status);
            }
        }
    };
    xmlHttpRequest.open(method, url);
    if (accept !== null) {
        xmlHttpRequest.setRequestHeader(_constants.ACCEPT, accept);
    }
    if (contentType !== null) {
        xmlHttpRequest.setRequestHeader(_constants.CONTENT_TYPE, contentType);
    }
    body1 !== null ? xmlHttpRequest.send(body1) : xmlHttpRequest.send();
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;
function underwriteAccept(headers) {
    var name = _constants.ACCEPT, value = _contentTypes.APPLICATION_JSON_CONTENT_TYPE; ///
    (0, _http).underwrite(headers, name, value);
}
function underwriteContentType(headers) {
    var name = _constants.CONTENT_TYPE, value = _contentTypes.APPLICATION_JSON_CONTENT_TYPE; ///
    (0, _http).underwrite(headers, name, value);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYWpheC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQUNDRVBULCBDT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBHRVRfTUVUSE9ELCBQT1NUX01FVEhPRCB9IGZyb20gXCIuLi9tZXRob2RzXCI7XG5pbXBvcnQgeyBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi9jb250ZW50VHlwZXNcIjtcbmltcG9ydCB7IHVuZGVyd3JpdGUsIHVybEZyb21Ib3N0VVJJQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2h0dHBcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldChob3N0LCB1cmksIHF1ZXJ5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gaGVhZGVyczsgLy8vXG4gICAgaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IG51bGw7XG5cbiAgdW5kZXJ3cml0ZUFjY2VwdChoZWFkZXJzKTtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgYm9keSwgaGVhZGVycywgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHF1ZXJ5LCBib2R5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gaGVhZGVyczsgLy8vXG4gICAgaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0Q7XG5cbiAgdW5kZXJ3cml0ZUFjY2VwdChoZWFkZXJzKTtcblxuICB1bmRlcndyaXRlQ29udGVudFR5cGUoaGVhZGVycyk7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHF1ZXJ5LCBtZXRob2QsIGJvZHksIGhlYWRlcnMsIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBib2R5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBjb25zdCB1cmwgPSB1cmxGcm9tSG9zdFVSSUFuZFF1ZXJ5KGhvc3QsIHVyaSwgcXVlcnkpLFxuICAgICAgICBhY2NlcHQgPSBoZWFkZXJzW0FDQ0VQVF0gfHwgbnVsbCxcbiAgICAgICAgY29udGVudFR5cGUgPSBoZWFkZXJzW0NPTlRFTlRfVFlQRV0gfHwgbnVsbCxcbiAgICAgICAgeG1sSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICBpZiAoY29udGVudFR5cGUgPT09IEFQUExJQ0FUSU9OX0pTT05fQ09OVEVOVF9UWVBFKSB7XG4gICAgY29uc3QganNvbiA9IGJvZHksICAvLy9cbiAgICAgICAgICBqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgICBib2R5ID0ganNvblN0cmluZzsgIC8vL1xuICB9XG5cbiAgeG1sSHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgc3RhdHVzLCByZXNwb25zZVRleHQgfSA9IHhtbEh0dHBSZXF1ZXN0O1xuXG4gICAgaWYgKHJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgbGV0IGJvZHkgPSByZXNwb25zZVRleHQ7XG5cbiAgICAgIGlmIChhY2NlcHQgPT09IEFQUExJQ0FUSU9OX0pTT05fQ09OVEVOVF9UWVBFKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QganNvblN0cmluZyA9IGJvZHksICAvLy9cbiAgICAgICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcblxuICAgICAgICAgIGJvZHkgPSBqc29uOyAgLy8vXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgYm9keSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhib2R5LCBzdGF0dXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICBpZiAoYWNjZXB0ICE9PSBudWxsKSB7XG4gICAgeG1sSHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihBQ0NFUFQsIGFjY2VwdCk7XG4gIH1cblxuICBpZiAoY29udGVudFR5cGUgIT09IG51bGwpIHtcbiAgICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKENPTlRFTlRfVFlQRSwgY29udGVudFR5cGUpO1xuICB9XG5cbiAgKGJvZHkgIT09IG51bGwpID9cbiAgICB4bWxIdHRwUmVxdWVzdC5zZW5kKGJvZHkpIDpcbiAgICAgIHhtbEh0dHBSZXF1ZXN0LnNlbmQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXQsXG4gIHBvc3QsXG4gIHJlcXVlc3Rcbn1cblxuZnVuY3Rpb24gdW5kZXJ3cml0ZUFjY2VwdChoZWFkZXJzKSB7XG4gIGNvbnN0IG5hbWUgPSBBQ0NFUFQsICAvLy9cbiAgICAgICAgdmFsdWUgPSBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRTsgLy8vXG5cbiAgdW5kZXJ3cml0ZShoZWFkZXJzLCBuYW1lLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHVuZGVyd3JpdGVDb250ZW50VHlwZShoZWFkZXJzKSB7XG4gIGNvbnN0IG5hbWUgPSBDT05URU5UX1RZUEUsICAvLy9cbiAgICAgICAgdmFsdWUgPSBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRTsgLy8vXG5cbiAgdW5kZXJ3cml0ZShoZWFkZXJzLCBuYW1lLCB2YWx1ZSk7XG59XG4iXSwibmFtZXMiOlsiZ2V0IiwicG9zdCIsInJlcXVlc3QiLCJob3N0IiwidXJpIiwicXVlcnkiLCJoZWFkZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJib2R5IiwidW5kZXJ3cml0ZUFjY2VwdCIsInVuZGVyd3JpdGVDb250ZW50VHlwZSIsInVybCIsImFjY2VwdCIsImNvbnRlbnRUeXBlIiwieG1sSHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImpzb24iLCJqc29uU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJwYXJzZSIsImVycm9yIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwibmFtZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O1FBT0lBLEdBQUcsR0FBSEEsR0FBRztRQWNIQyxJQUFJLEdBQUpBLElBQUk7UUFlSkMsT0FBTyxHQUFQQSxPQUFPOztBQWxDYyxHQUFjLENBQWQsVUFBYztBQUNYLEdBQVksQ0FBWixRQUFZO0FBQ04sR0FBaUIsQ0FBakIsYUFBaUI7QUFDWixHQUFtQixDQUFuQixLQUFtQjtTQUV0REYsR0FBRyxDQUFDRyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ3hELEVBQUUsRUFBRUEsUUFBUSxLQUFLQyxTQUFTLEVBQUUsQ0FBQztRQUMzQkQsUUFBUSxHQUFHRCxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQ3ZCQSxPQUFPLEdBQUcsQ0FBQztRQUFBLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBSyxDQUFDRyxNQUFNLEdBVjBCLFFBQVksYUFXNUNDLElBQUksR0FBRyxJQUFJO0lBRWpCQyxnQkFBZ0IsQ0FBQ0wsT0FBTztJQUV4QkosT0FBTyxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFSSxNQUFNLEVBQUVDLElBQUksRUFBRUosT0FBTyxFQUFFQyxRQUFRO0FBQzNELENBQUM7U0FFZU4sSUFBSSxDQUFDRSxJQUFJLEVBQUVDLEdBQUcs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