"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports.default = void 0;
var _methods = require("../methods");
var _contentTypes = require("../contentTypes");
var _http = require("../utilities/http");
var _constants = require("../constants");
function get(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var body = null, method = _methods.GET_METHOD, accept = _contentTypes.APPLICATION_JSON_CONTENT_TYPE;
    underwriteAccept(headers, accept);
    request(host, uri, query, method, headers, body, callback);
}
function post(host, uri, query, headers, body, callback) {
    if (callback === undefined) {
        callback = body;
        body = headers;
        headers = {
        };
    }
    var method = _methods.POST_METHOD, accept = _contentTypes.APPLICATION_JSON_CONTENT_TYPE, contentType = _contentTypes.APPLICATION_JSON_CONTENT_TYPE;
    underwriteAccept(headers, accept);
    underwriteContentType(headers, contentType);
    request(host, uri, query, method, headers, body, callback);
}
function request(host, uri, query, method, headers, body1, callback) {
    var url = (0, _http).urlFromHostURIAndQuery(host, uri, query), accept = headers[_constants.ACCEPT] || null, contentType = headers[_constants.CONTENT_TYPE] || null, xmlHttpRequest = new XMLHttpRequest();
    if (contentType === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
        var json = body1, jsonString = JSON.stringify(json), content = jsonString, contentLength = content.length;
        underwriteContentLength(headers, contentLength);
        body1 = jsonString; ///
    }
    xmlHttpRequest.onreadystatechange = function() {
        var readyState = xmlHttpRequest.readyState, status = xmlHttpRequest.status, responseText = xmlHttpRequest.responseText;
        if (readyState == 4) {
            var body = responseText;
            if (accept === _contentTypes.APPLICATION_JSON_CONTENT_TYPE) {
                try {
                    var jsonString = body, json = JSON.parse(jsonString);
                    body = json; ///
                } catch (error) {
                    body = null;
                }
                callback(body, status);
            }
        }
    };
    xmlHttpRequest.open(method, url);
    if (accept !== null) {
        xmlHttpRequest.setRequestHeader(_constants.ACCEPT, accept);
    }
    if (contentType !== null) {
        xmlHttpRequest.setRequestHeader(_constants.CONTENT_TYPE, contentType);
    }
    body1 !== null ? xmlHttpRequest.send(body1) : xmlHttpRequest.send();
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;
function underwriteAccept(headers, accept) {
    var name = _constants.ACCEPT, value = accept; ///
    (0, _http).underwrite(headers, name, value);
}
function underwriteContentType(headers, contentTYpe) {
    var name = _constants.CONTENT_TYPE, value = contentTYpe; ///
    (0, _http).underwrite(headers, name, value);
}
function underwriteContentLength(headers, contentLength) {
    var name = _constants.CONTENT_LENGTH, value = contentLength; ///
    (0, _http).underwrite(headers, name, value);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,