"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkEntryExists = checkEntryExists;
exports.checkFileExists = checkFileExists;
exports.checkDirectoryExists = checkDirectoryExists;
exports.isEntryFile = isEntryFile;
exports.isEntryDirectory = isEntryDirectory;
exports.isDirectoryEmpty = isDirectoryEmpty;
exports.readDirectory = readDirectory;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.appendToFile = appendToFile;
exports.createDirectory = createDirectory;
exports.renameFile = renameFile;
exports.getStats = getStats;
exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _defaults = require("../defaults");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function checkEntryExists(entryPath) {
    var entryExists = _fs.default.existsSync(entryPath);
    return entryExists;
}
function checkFileExists(filePath) {
    var fileExists = false;
    var entryPath = filePath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        var entryFile = isEntryFile(entryPath);
        if (entryFile) {
            fileExists = true;
        }
    }
    return fileExists;
}
function checkDirectoryExists(directoryPath) {
    var directoryExists = false;
    var entryPath = directoryPath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        var entryDirectory = isEntryDirectory(entryPath);
        if (entryDirectory) {
            directoryExists = true;
        }
    }
    return directoryExists;
}
function isEntryFile(entryPath) {
    var stat = _fs.default.statSync(entryPath), entryDirectory = stat.isDirectory(), entryFile = !entryDirectory;
    return entryFile;
}
function isEntryDirectory(entryPath) {
    var stat = _fs.default.statSync(entryPath), entryDirectory = stat.isDirectory();
    return entryDirectory;
}
function isDirectoryEmpty(directoryPath) {
    var subEntryNames = readDirectory(directoryPath), subEntryNamesLength = subEntryNames.length, directoryEmpty = subEntryNamesLength === 0;
    return directoryEmpty;
}
function readDirectory(directoryPath) {
    var subEntryNames = _fs.default.readdirSync(directoryPath);
    return subEntryNames;
}
function readFile(filePath, param) {
    var encoding = param === void 0 ? _defaults.DEFAULT_ENCODING : param;
    var options = {
        encoding: encoding
    }, content = _fs.default.readFileSync(filePath, options);
    return content;
}
function writeFile(filePath, content) {
    _fs.default.writeFileSync(filePath, content);
}
function appendToFile(filePath, content) {
    _fs.default.appendFileSync(filePath, content);
}
function createDirectory(directoryPath) {
    var recursive = true, options = {
        recursive: recursive
    };
    _fs.default.mkdirSync(directoryPath, options);
}
function renameFile(oldFilePath, newFilePath) {
    _fs.default.renameSync(oldFilePath, newFilePath);
}
function getStats(filePath) {
    return _fs.default.statSync(filePath);
}
var _default = {
    checkEntryExists: checkEntryExists,
    checkFileExists: checkFileExists,
    checkDirectoryExists: checkDirectoryExists,
    isEntryFile: isEntryFile,
    isEntryDirectory: isEntryDirectory,
    isDirectoryEmpty: isDirectoryEmpty,
    readDirectory: readDirectory,
    readFile: readFile,
    writeFile: writeFile,
    appendToFile: appendToFile,
    createDirectory: createDirectory,
    renameFile: renameFile,
    getStats: getStats
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG5pbXBvcnQgeyBERUZBVUxUX0VOQ09ESU5HIH0gZnJvbSBcIi4uL2RlZmF1bHRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCkge1xuICBjb25zdCBlbnRyeUV4aXN0cyA9IGZzLmV4aXN0c1N5bmMoZW50cnlQYXRoKTtcblxuICByZXR1cm4gZW50cnlFeGlzdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ZpbGVFeGlzdHMoZmlsZVBhdGgpIHtcbiAgbGV0IGZpbGVFeGlzdHMgPSBmYWxzZTtcbiAgXG4gIGNvbnN0IGVudHJ5UGF0aCA9IGZpbGVQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCk7XG4gIFxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCBlbnRyeUZpbGUgPSBpc0VudHJ5RmlsZShlbnRyeVBhdGgpO1xuICAgIFxuICAgIGlmIChlbnRyeUZpbGUpIHtcbiAgICAgIGZpbGVFeGlzdHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIGZpbGVFeGlzdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0RpcmVjdG9yeUV4aXN0cyhkaXJlY3RvcnlQYXRoKSB7XG4gIGxldCBkaXJlY3RvcnlFeGlzdHMgPSBmYWxzZTtcblxuICBjb25zdCBlbnRyeVBhdGggPSBkaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCk7XG5cbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGVudHJ5UGF0aCk7XG5cbiAgICBpZiAoZW50cnlEaXJlY3RvcnkpIHtcbiAgICAgIGRpcmVjdG9yeUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUV4aXN0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW50cnlGaWxlKGVudHJ5UGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoZW50cnlQYXRoKSxcbiAgICAgICAgZW50cnlEaXJlY3RvcnkgPSBzdGF0LmlzRGlyZWN0b3J5KCksXG4gICAgICAgIGVudHJ5RmlsZSA9ICFlbnRyeURpcmVjdG9yeTtcblxuICByZXR1cm4gZW50cnlGaWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbnRyeURpcmVjdG9yeShlbnRyeVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGVudHJ5UGF0aCksXG4gICAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpO1xuXG4gIHJldHVybiBlbnRyeURpcmVjdG9yeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGlyZWN0b3J5RW1wdHkoZGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gcmVhZERpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc3ViRW50cnlOYW1lc0xlbmd0aCA9IHN1YkVudHJ5TmFtZXMubGVuZ3RoLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IChzdWJFbnRyeU5hbWVzTGVuZ3RoID09PSAwKTtcblxuICByZXR1cm4gZGlyZWN0b3J5RW1wdHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGRpcmVjdG9yeVBhdGgpO1xuXG4gIHJldHVybiBzdWJFbnRyeU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUoZmlsZVBhdGgsIGVuY29kaW5nID0gREVGQVVMVF9FTkNPRElORykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGVuY29kaW5nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIGNvbnRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kVG9GaWxlKGZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLmFwcGVuZEZpbGVTeW5jKGZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZSA9IHRydWUsXG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgcmVjdXJzaXZlXG4gICAgICAgIH07XG5cbiAgZnMubWtkaXJTeW5jKGRpcmVjdG9yeVBhdGgsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuYW1lRmlsZShvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpIHtcbiAgZnMucmVuYW1lU3luYyhvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHMoZmlsZVBhdGgpIHtcbiAgcmV0dXJuIGZzLnN0YXRTeW5jKGZpbGVQYXRoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjaGVja0VudHJ5RXhpc3RzLFxuICBjaGVja0ZpbGVFeGlzdHMsXG4gIGNoZWNrRGlyZWN0b3J5RXhpc3RzLFxuICBpc0VudHJ5RmlsZSxcbiAgaXNFbnRyeURpcmVjdG9yeSxcbiAgaXNEaXJlY3RvcnlFbXB0eSxcbiAgcmVhZERpcmVjdG9yeSxcbiAgcmVhZEZpbGUsXG4gIHdyaXRlRmlsZSxcbiAgYXBwZW5kVG9GaWxlLFxuICBjcmVhdGVEaXJlY3RvcnksXG4gIHJlbmFtZUZpbGUsXG4gIGdldFN0YXRzXG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7UUFNSSxnQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBTWhCLGVBQWUsR0FBZixlQUFlO1FBaUJmLG9CQUFvQixHQUFwQixvQkFBb0I7UUFpQnBCLFdBQVcsR0FBWCxXQUFXO1FBUVgsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQU9oQixnQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBUWhCLGFBQWEsR0FBYixhQUFhO1FBTWIsUUFBUSxHQUFSLFFBQVE7UUFTUixTQUFTLEdBQVQsU0FBUztRQUlULFlBQVksR0FBWixZQUFZO1FBSVosZUFBZSxHQUFmLGVBQWU7UUFTZixVQUFVLEdBQVYsVUFBVTtRQUlWLFFBQVEsR0FBUixRQUFROztBQXZHVCxHQUFJLENBQUosR0FBSTtBQUVjLEdBQWEsQ0FBYixTQUFhOzs7Ozs7U0FFOUIsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDM0MsR0FBSyxDQUFDLFdBQVcsR0FMSixHQUFJLFNBS00sVUFBVSxDQUFDLFNBQVM7V0FFcEMsV0FBVztBQUNwQixDQUFDO1NBRWUsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsS0FBSztJQUV0QixHQUFLLENBQUMsU0FBUyxHQUFHLFFBQVEsRUFDcEIsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFNBQVM7SUFFOUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ2hCLEdBQUssQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVM7UUFFdkMsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDO1lBQ2QsVUFBVSxHQUFHLElBQUk7UUFDbkIsQ0FBQztJQUNILENBQUM7V0FFTSxVQUFVO0FBQ25CLENBQUM7U0FFZSxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNuRCxHQUFHLENBQUMsZUFBZSxHQUFHLEtBQUs7SUFFM0IsR0FBSyxDQUFD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