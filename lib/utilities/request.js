"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _constants = require("../constants");
var _methods = require("../methods");
var _http = require("../utilities/http");
var http = require("http"), https = require("https");
function get(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.GET_METHOD, _request = request(host, uri, query, method, headers, callback);
    _request.end();
    return _request;
}
function post(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.POST_METHOD, _request = request(host, uri, query, method, headers, callback);
    return _request;
}
function request(host, uri, query, method, headers, callback) {
    var port = (0, _http).portFromHost(host), secure = (0, _http).secureFromHost(host), hostname = (0, _http).hostnameFromHost(host), queryString = (0, _http).queryStringFromQuery(query), path = queryString === _constants.EMPTY_STRING ? uri : "".concat(uri, "?").concat(queryString), options = {
        hostname: hostname,
        headers: headers,
        method: method,
        port: port,
        path: path
    }, request = secure ? https.request : http.request; ///
    var _request = request(options, function(response) {
        var error = null;
        callback(error, response);
    });
    _request.on(_constants.ERROR, function(error) {
        var response = null;
        callback(error, response);
    });
    return _request;
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJodHRwIiwicmVxdWlyZSIsImh0dHBzIiwiRVJST1IiLCJFTVBUWV9TVFJJTkciLCJHRVRfTUVUSE9EIiwiUE9TVF9NRVRIT0QiLCJwb3J0RnJvbUhvc3QiLCJzZWN1cmVGcm9tSG9zdCIsImhvc3RuYW1lRnJvbUhvc3QiLCJxdWVyeVN0cmluZ0Zyb21RdWVyeSIsImdldCIsImhvc3QiLCJ1cmkiLCJxdWVyeSIsImhlYWRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsIl9yZXF1ZXN0IiwicmVxdWVzdCIsImVuZCIsInBvc3QiLCJwb3J0Iiwic2VjdXJlIiwiaG9zdG5hbWUiLCJxdWVyeVN0cmluZyIsInBhdGgiLCJvcHRpb25zIiwicmVzcG9uc2UiLCJlcnJvciIsIm9uIl0sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7OztBQUt3QixHQUFjLENBQWQsVUFBYztBQUNWLEdBQVksQ0FBWixRQUFZO0FBQ2lDLEdBQW1CLENBQW5CLEtBQW1CO0FBTHhHLEdBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFDLElBQU0sSUFDckIsS0FBSyxHQUFHLE9BQU8sRUFBQyxLQUFPO1NBTXBCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDakQsRUFBRSxFQUFFLFFBQVEsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMzQixRQUFRLEdBQUcsT0FBTyxDQUFFLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztRQUN2QixPQUFPLEdBQUcsQ0FBQztRQUFBLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBSyxDQUFDLE1BQU0sR0FUMEIsUUFBWSxhQVU1QyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUVwRSxRQUFRLENBQUMsR0FBRztJQUVaLE1BQU0sQ0FBQyxRQUFRO0FBQ2pCLENBQUM7U0FFUSxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQ2xELEVBQUUsRUFBRSxRQUFRLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDM0IsUUFBUSxHQUFHLE9BQU8sQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFDdkIsT0FBTyxHQUFHLENBQUM7UUFBQSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUssQ0FBQyxNQUFNLEdBdkIwQixRQUFZLGNBd0I1QyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUVwRSxNQUFNLENBQUMsUUFBUTtBQUNqQixDQUFDO1NBRVEsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDN0QsR0FBSyxDQUFDLElBQUksT0E3QnlFLEtBQW1CLGVBNkI1RSxJQUFJLEdBQ3hCLE1BQU0sT0E5QnVFLEtBQW1CLGlCQThCeEUsSUFBSSxHQUM1QixRQUFRLE9BL0JxRSxLQUFtQixtQkErQnBFLElBQUksR0FDaEMsV0FBVyxPQWhDa0UsS0FBbUIsdUJBZ0M3RCxLQUFLLEdBQ3hDLElBQUksR0FBSSxXQUFXLEtBbkNTLFVBQWMsZ0JBb0NqQyxHQUFHLE1BQ1EsTUFBVyxDQUFsQixHQUFHLEdBQUMsQ0FBQyxHQUFjLE1BQUEsQ0FBWixXQUFXLEdBQy9CLE9BQU8sR0FBRyxDQUFDO1FBQ1QsUUFBUSxFQUFSLFFBQVE7UUFDUixPQUFPLEVBQVAsT0FBTztRQUNQLE1BQU0sRUFBTixNQUFNO1FBQ04sSUFBSSxFQUFKLElBQUk7UUFDSixJQUFJLEVBQUosSUFBSTtJQUNOLENBQUMsRUFDRCxPQUFPLEdBQUcsTUFBTSxHQUNKLEtBQUssQ0FBQyxPQUFPLEdBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFckMsR0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBUCxRQUFRLEVBQUssQ0FBQztRQUMvQyxHQUFLLENBQUMsS0FBSyxHQUFHLElBQUk7UUFFbEIsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRO0lBQzFCLENBQUM7SUFFRCxRQUFRLENBQUMsRUFBRSxDQXZEdUIsVUFBYyxRQXVEN0IsUUFBUSxDQUFQLEtBQUssRUFBSyxDQUFDO1FBQzdCLEdBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSTtRQUVyQixRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVE7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRO0FBQ2pCLENBQUM7ZUFFYyxDQUFDO0lBQ2QsR0FBRyxFQUFILEdBQUc7SUFDSCxJQUFJLEVBQUosSUFBSTtJQUNKLE9BQU8sRUFBUCxPQUFPO0FBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIiksXG4gICAgICBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcblxuaW1wb3J0IHsgRVJST1IsIEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IEdFVF9NRVRIT0QsIFBPU1RfTUVUSE9EIH0gZnJvbSBcIi4uL21ldGhvZHNcIjtcbmltcG9ydCB7IHBvcnRGcm9tSG9zdCwgc2VjdXJlRnJvbUhvc3QsIGhvc3RuYW1lRnJvbUhvc3QsIHF1ZXJ5U3RyaW5nRnJvbVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9odHRwXCI7XG5cbmZ1bmN0aW9uIGdldChob3N0LCB1cmksIHF1ZXJ5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gaGVhZGVyczsgLy8vXG4gICAgaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgX3JlcXVlc3QgPSByZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgY2FsbGJhY2spO1xuXG4gIF9yZXF1ZXN0LmVuZCgpO1xuXG4gIHJldHVybiBfcmVxdWVzdDtcbn1cblxuZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHF1ZXJ5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gaGVhZGVyczsgLy8vXG4gICAgaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0QsXG4gICAgICAgIF9yZXF1ZXN0ID0gcmVxdWVzdChob3N0LCB1cmksIHF1ZXJ5LCBtZXRob2QsIGhlYWRlcnMsIGNhbGxiYWNrKTtcblxuICByZXR1cm4gX3JlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBjb25zdCBwb3J0ID0gcG9ydEZyb21Ib3N0KGhvc3QpLFxuICAgICAgICBzZWN1cmUgPSBzZWN1cmVGcm9tSG9zdChob3N0KSxcbiAgICAgICAgaG9zdG5hbWUgPSBob3N0bmFtZUZyb21Ib3N0KGhvc3QpLFxuICAgICAgICBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nRnJvbVF1ZXJ5KHF1ZXJ5KSxcbiAgICAgICAgcGF0aCA9IChxdWVyeVN0cmluZyA9PT0gRU1QVFlfU1RSSU5HKSA/XG4gICAgICAgICAgICAgICAgIHVyaSA6XG4gICAgICAgICAgICAgICAgICBgJHt1cml9PyR7cXVlcnlTdHJpbmd9YCxcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBwb3J0LFxuICAgICAgICAgIHBhdGhcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdCA9IHNlY3VyZSA/XG4gICAgICAgICAgICAgICAgICAgIGh0dHBzLnJlcXVlc3QgOiAvLy9cbiAgICAgICAgICAgICAgICAgICAgICBodHRwLnJlcXVlc3Q7IC8vL1xuXG4gIGNvbnN0IF9yZXF1ZXN0ID0gcmVxdWVzdChvcHRpb25zLCAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UpO1xuICB9KTtcblxuICBfcmVxdWVzdC5vbihFUlJPUiwgKGVycm9yKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBudWxsO1xuXG4gICAgY2FsbGJhY2soZXJyb3IsIHJlc3BvbnNlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIF9yZXF1ZXN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldCxcbiAgcG9zdCxcbiAgcmVxdWVzdFxufTtcbiJdfQ==