"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _constants = require("../constants");
var _methods = require("../methods");
var _http = require("../utilities/http");
var http = require("http"), https = require("https");
function createRequest(host, uri, query, method, headers, callback) {
    var port = (0, _http).portFromHost(host), secure = (0, _http).secureFromHost(host), hostname = (0, _http).hostnameFromHost(host), queryString = (0, _http).queryStringFromQuery(query), path = queryString === _constants.EMPTY_STRING ? uri : "".concat(uri, "?").concat(queryString), options = {
        hostname: hostname,
        headers: headers,
        method: method,
        port: port,
        path: path
    }, createRequest = secure ? https.request : http.request; ///
    var request = createRequest(options, function(response) {
        var error = null;
        callback(error, response);
    });
    request.on(_constants.ERROR, function(error) {
        var response = null;
        callback(error, response);
    });
    return request;
}
function createGetRequest(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.GET_METHOD, getRequest = createRequest(host, uri, query, method, headers, callback);
    return getRequest;
}
function createPostRequest(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.POST_METHOD, postRequest = createRequest(host, uri, query, method, headers, callback);
    return postRequest;
}
var _default = {
    createRequest: createRequest,
    createGetRequest: createGetRequest,
    createPostRequest: createPostRequest
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJodHRwIiwicmVxdWlyZSIsImh0dHBzIiwiRVJST1IiLCJFTVBUWV9TVFJJTkciLCJHRVRfTUVUSE9EIiwiUE9TVF9NRVRIT0QiLCJwb3J0RnJvbUhvc3QiLCJzZWN1cmVGcm9tSG9zdCIsImhvc3RuYW1lRnJvbUhvc3QiLCJxdWVyeVN0cmluZ0Zyb21RdWVyeSIsImNyZWF0ZVJlcXVlc3QiLCJob3N0IiwidXJpIiwicXVlcnkiLCJtZXRob2QiLCJoZWFkZXJzIiwiY2FsbGJhY2siLCJwb3J0Iiwic2VjdXJlIiwiaG9zdG5hbWUiLCJxdWVyeVN0cmluZyIsInBhdGgiLCJvcHRpb25zIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiZXJyb3IiLCJvbiIsImNyZWF0ZUdldFJlcXVlc3QiLCJ1bmRlZmluZWQiLCJnZXRSZXF1ZXN0IiwiY3JlYXRlUG9zdFJlcXVlc3QiLCJwb3N0UmVxdWVzdCJdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7QUFLd0IsR0FBYyxDQUFkLFVBQWM7QUFDVixHQUFZLENBQVosUUFBWTtBQUNpQyxHQUFtQixDQUFuQixLQUFtQjtBQUx4RyxHQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBQyxJQUFNLElBQ3JCLEtBQUssR0FBRyxPQUFPLEVBQUMsS0FBTztTQU1wQixhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNuRSxHQUFLLENBQUMsSUFBSSxPQUh5RSxLQUFtQixlQUc1RSxJQUFJLEdBQ3hCLE1BQU0sT0FKdUUsS0FBbUIsaUJBSXhFLElBQUksR0FDNUIsUUFBUSxPQUxxRSxLQUFtQixtQkFLcEUsSUFBSSxHQUNoQyxXQUFXLE9BTmtFLEtBQW1CLHVCQU03RCxLQUFLLEdBQ3hDLElBQUksR0FBSSxXQUFXLEtBVFMsVUFBYyxnQkFVakMsR0FBRyxNQUNRLE1BQVcsQ0FBbEIsR0FBRyxHQUFDLENBQUMsR0FBYyxNQUFBLENBQVosV0FBVyxHQUMvQixPQUFPLEdBQUcsQ0FBQztRQUNULFFBQVEsRUFBUixRQUFRO1FBQ1IsT0FBTyxFQUFQLE9BQU87UUFDUCxNQUFNLEVBQU4sTUFBTTtRQUNOLElBQUksRUFBSixJQUFJO1FBQ0osSUFBSSxFQUFKLElBQUk7SUFDTixDQUFDLEVBQ0QsYUFBYSxHQUFHLE1BQU0sR0FDSixLQUFLLENBQUMsT0FBTyxHQUNYLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRTNDLEdBQUssQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQVAsUUFBUSxFQUFLLENBQUM7UUFDcEQsR0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJO1FBRWxCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUTtJQUMxQixDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQUUsQ0E3QndCLFVBQWMsUUE2QjlCLFFBQVEsQ0FBUCxLQUFLLEVBQUssQ0FBQztRQUM1QixHQUFLLENBQUMsUUFBUSxHQUFHLElBQUk7UUFFckIsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTztBQUNoQixDQUFDO1NBRVEsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQzlELEVBQUUsRUFBRSxRQUFRLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDM0IsUUFBUSxHQUFHLE9BQU8sQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFDdkIsT0FBTyxHQUFHLENBQUM7UUFBQSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUssQ0FBQyxNQUFNLEdBM0MwQixRQUFZLGFBNEM1QyxVQUFVLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUU1RSxNQUFNLENBQUMsVUFBVTtBQUNuQixDQUFDO1NBRVEsaUJBQWlCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQy9ELEVBQUUsRUFBRSxRQUFRLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDM0IsUUFBUSxHQUFHLE9BQU8sQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFDdkIsT0FBTyxHQUFHLENBQUM7UUFBQSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUssQ0FBQyxNQUFNLEdBdkQwQixRQUFZLGNBd0Q1QyxXQUFXLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUU3RSxNQUFNLENBQUMsV0FBVztBQUNwQixDQUFDO2VBRWMsQ0FBQztJQUNkLGFBQWEsRUFBYixhQUFhO0lBQ2IsZ0JBQWdCLEVBQWhCLGdCQUFnQjtJQUNoQixpQkFBaUIsRUFBakIsaUJBQWlCO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpLFxuICAgICAgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbmltcG9ydCB7IEVSUk9SLCBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBHRVRfTUVUSE9ELCBQT1NUX01FVEhPRCB9IGZyb20gXCIuLi9tZXRob2RzXCI7XG5pbXBvcnQgeyBwb3J0RnJvbUhvc3QsIHNlY3VyZUZyb21Ib3N0LCBob3N0bmFtZUZyb21Ib3N0LCBxdWVyeVN0cmluZ0Zyb21RdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvaHR0cFwiO1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgY2FsbGJhY2spIHtcbiAgY29uc3QgcG9ydCA9IHBvcnRGcm9tSG9zdChob3N0KSxcbiAgICAgICAgc2VjdXJlID0gc2VjdXJlRnJvbUhvc3QoaG9zdCksXG4gICAgICAgIGhvc3RuYW1lID0gaG9zdG5hbWVGcm9tSG9zdChob3N0KSxcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0Zyb21RdWVyeShxdWVyeSksXG4gICAgICAgIHBhdGggPSAocXVlcnlTdHJpbmcgPT09IEVNUFRZX1NUUklORykgP1xuICAgICAgICAgICAgICAgICB1cmkgOlxuICAgICAgICAgICAgICAgICAgYCR7dXJpfT8ke3F1ZXJ5U3RyaW5nfWAsXG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgcG9ydCxcbiAgICAgICAgICBwYXRoXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZVJlcXVlc3QgPSBzZWN1cmUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwcy5yZXF1ZXN0IDogLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cC5yZXF1ZXN0OyAvLy9cblxuICBjb25zdCByZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdChvcHRpb25zLCAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UpO1xuICB9KTtcblxuICByZXF1ZXN0Lm9uKEVSUk9SLCAoZXJyb3IpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IG51bGw7XG5cbiAgICBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UpO1xuICB9KTtcblxuICByZXR1cm4gcmVxdWVzdDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0UmVxdWVzdChob3N0LCB1cmksIHF1ZXJ5LCBoZWFkZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gaGVhZGVyczsgLy8vXG4gICAgaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgZ2V0UmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCBjYWxsYmFjayk7XG5cbiAgcmV0dXJuIGdldFJlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvc3RSZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsbGJhY2sgPSBoZWFkZXJzOyAvLy9cbiAgICBoZWFkZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBQT1NUX01FVEhPRCxcbiAgICAgICAgcG9zdFJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgY2FsbGJhY2spO1xuXG4gIHJldHVybiBwb3N0UmVxdWVzdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjcmVhdGVSZXF1ZXN0LFxuICBjcmVhdGVHZXRSZXF1ZXN0LFxuICBjcmVhdGVQb3N0UmVxdWVzdFxufTtcbiJdfQ==