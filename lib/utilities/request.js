"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _constants = require("../constants");
var _methods = require("../methods");
var _http = require("../utilities/http");
var http = require("http"), https = require("https");
function get(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.GET_METHOD, _request = request1(host, uri, query, method, headers, callback);
    _request.end();
    return _request;
}
function post(host, uri, query, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _methods.POST_METHOD, _request = request1(host, uri, query, method, headers, callback);
    return _request;
}
function request1(host, uri, query, method, headers, callback) {
    var port = (0, _http).portFromHost(host), secure = (0, _http).secureFromHost(host), hostname = (0, _http).hostnameFromHost(host), queryString = (0, _http).queryStringFromQuery(query), path = queryString === _constants.EMPTY_STRING ? uri : "".concat(uri, "?").concat(queryString), options = {
        hostname: hostname,
        headers: headers,
        method: method,
        port: port,
        path: path
    }, request = secure ? https.request : http.request; ///
    var _request = request(options, function(response) {
        var error = null;
        callback(error, response);
    });
    _request.on(_constants.ERROR, function(error) {
        var response = null;
        callback(error, response);
    });
    return _request;
}
var _default = {
    get: get,
    post: post,
    request: request1
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpLFxuICAgICAgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbmltcG9ydCB7IEVSUk9SLCBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBHRVRfTUVUSE9ELCBQT1NUX01FVEhPRCB9IGZyb20gXCIuLi9tZXRob2RzXCI7XG5pbXBvcnQgeyBwb3J0RnJvbUhvc3QsIHNlY3VyZUZyb21Ib3N0LCBob3N0bmFtZUZyb21Ib3N0LCBxdWVyeVN0cmluZ0Zyb21RdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvaHR0cFwiO1xuXG5mdW5jdGlvbiBnZXQoaG9zdCwgdXJpLCBxdWVyeSwgaGVhZGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IGhlYWRlcnM7IC8vL1xuICAgIGhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IEdFVF9NRVRIT0QsXG4gICAgICAgIF9yZXF1ZXN0ID0gcmVxdWVzdChob3N0LCB1cmksIHF1ZXJ5LCBtZXRob2QsIGhlYWRlcnMsIGNhbGxiYWNrKTtcblxuICBfcmVxdWVzdC5lbmQoKTtcblxuICByZXR1cm4gX3JlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIHBvc3QoaG9zdCwgdXJpLCBxdWVyeSwgaGVhZGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IGhlYWRlcnM7IC8vL1xuICAgIGhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuICAgICAgICBfcmVxdWVzdCA9IHJlcXVlc3QoaG9zdCwgdXJpLCBxdWVyeSwgbWV0aG9kLCBoZWFkZXJzLCBjYWxsYmFjayk7XG5cbiAgcmV0dXJuIF9yZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0KGhvc3QsIHVyaSwgcXVlcnksIG1ldGhvZCwgaGVhZGVycywgY2FsbGJhY2spIHtcbiAgY29uc3QgcG9ydCA9IHBvcnRGcm9tSG9zdChob3N0KSxcbiAgICAgICAgc2VjdXJlID0gc2VjdXJlRnJvbUhvc3QoaG9zdCksXG4gICAgICAgIGhvc3RuYW1lID0gaG9zdG5hbWVGcm9tSG9zdChob3N0KSxcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0Zyb21RdWVyeShxdWVyeSksXG4gICAgICAgIHBhdGggPSAocXVlcnlTdHJpbmcgPT09IEVNUFRZX1NUUklORykgP1xuICAgICAgICAgICAgICAgICB1cmkgOlxuICAgICAgICAgICAgICAgICAgYCR7dXJpfT8ke3F1ZXJ5U3RyaW5nfWAsXG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgcG9ydCxcbiAgICAgICAgICBwYXRoXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVlc3QgPSBzZWN1cmUgP1xuICAgICAgICAgICAgICAgICAgICBodHRwcy5yZXF1ZXN0IDogLy8vXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5yZXF1ZXN0OyAvLy9cblxuICBjb25zdCBfcmVxdWVzdCA9IHJlcXVlc3Qob3B0aW9ucywgKHJlc3BvbnNlKSA9PiB7XG4gICAgY29uc3QgZXJyb3IgPSBudWxsO1xuXG4gICAgY2FsbGJhY2soZXJyb3IsIHJlc3BvbnNlKTtcbiAgfSk7XG5cbiAgX3JlcXVlc3Qub24oRVJST1IsIChlcnJvcikgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gbnVsbDtcblxuICAgIGNhbGxiYWNrKGVycm9yLCByZXNwb25zZSk7XG4gIH0pO1xuXG4gIHJldHVybiBfcmVxdWVzdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXQsXG4gIHBvc3QsXG4gIHJlcXVlc3Rcbn07XG4iXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJodHRwcyIsImdldCIsImhvc3QiLCJ1cmkiLCJxdWVyeSIsImhlYWRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsIl9yZXF1ZXN0IiwicmVxdWVzdCIsImVuZCIsInBvc3QiLCJwb3J0Iiwic2VjdXJlIiwiaG9zdG5hbWUiLCJxdWVyeVN0cmluZyIsInBhdGgiLCJvcHRpb25zIiwicmVzcG9uc2UiLCJlcnJvciIsIm9uIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7OztBQUt3QixHQUFjLENBQWQsVUFBYztBQUNWLEdBQVksQ0FBWixRQUFZO0FBQ2lDLEdBQW1CLENBQW5CLEtBQW1CO0FBTHhHLEdBQUssQ0FBQ0EsSUFBSSxHQUFHQyxPQUFPLENBQUMsQ0FBTSxRQUNyQkMsS0FBSyxHQUFHRCxPQUFPLENBQUMsQ0FBTztTQU1wQkUsR0FBRyxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ2pELEVBQUUsRUFBRUEsUUFBUSxLQUFLQyxTQUFTLEVBQUUsQ0FBQztRQUMzQkQsUUFBUSxHQUFHRCxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQ3ZCQSxPQUFPLEdBQUcsQ0FBQztRQUFBLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBSyxDQUFDRyxNQUFNLEdBVDBCLFFBQVksYUFVNUNDLFFBQVEsR0FBR0MsUUFBTyxDQUFDUixJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFSSxNQUFNLEVBQUVILE9BQU8sRUFBRUMsUUFBUTtJQUVwRUcsUUFBUSxDQUFDRSxHQUFHO0lBRVosTUFBTSxDQUFDRixRQUFRO0FBQ2pCLENBQUM7U0FFUUcsSUFBSSxDQUFDVixJQUFJLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQ2xELEVBQUUsRUFBRUEsUUFBUSxLQUFLQyxTQUFTLEVBQUUsQ0FBQztRQUMzQkQsUUFBUSxHQUFHRCxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQ3ZCQSxPQUFPLEdBQUcsQ0FBQztRQUFBLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBSyxDQUFDRyxNQUFNLEdBdkIwQixRQUFZLGNBd0I1Q0MsUUFBUSxHQUFHQyxRQUFPLENBQUNSLElBQUksRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVJLE1BQU0sRUFBRUgsT0FBTyxFQUFFQyxRQUFRO0lBRXBFLE1BQU0sQ0FBQ0csUUFBUTtBQUNqQixDQUFDO1NBRVFDLFFBQU8sQ0FBQ1IsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUksTUFBTSxFQUFFSCxPQUFPLEVBQUVDLFFBQVEsRUFBRSxDQUFDO0lBQzdELEdBQUssQ0FBQ08sSUFBSSxPQTdCeUUsS0FBbUIsZUE2QjVFWCxJQUFJLEdBQ3hCWSxNQUFNLE9BOUJ1RSxLQUFtQixpQkE4QnhFWixJQUFJLEdBQzVCYSxRQUFRLE9BL0JxRSxLQUFtQixtQkErQnBFYixJQUFJLEdBQ2hDYyxXQUFXLE9BaENrRSxLQUFtQix1QkFnQzdEWixLQUFLLEdBQ3hDYSxJQUFJLEdBQUlELFdBQVcsS0FuQ1MsVUFBYyxnQkFvQ2pDYixHQUFHLEdBQ0QsQ0FBQSxFQUFTYSxNQUFXLENBQWxCYixHQUFHLEVBQUMsQ0FBQyxJQUFjLE1BQUEsQ0FBWmEsV0FBVyxHQUMvQkUsT0FBTyxHQUFHLENBQUM7UUFDVEgsUUFBUSxFQUFSQSxRQUFRO1FBQ1JWLE9BQU8sRUFBUEEsT0FBTztRQUNQRyxNQUFNLEVBQU5BLE1BQU07UUFDTkssSUFBSSxFQUFKQSxJQUFJO1FBQ0pJLElBQUksRUFBSkEsSUFBSTtJQUNOLENBQUMsRUFDRFAsT0FBTyxHQUFHSSxNQUFNLEdBQ0pkLEtBQUssQ0FBQ1UsT0FBTyxHQUNYWixJQUFJLENBQUNZLE9BQU8sQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFckMsR0FBSyxDQUFDRCxRQUFRLEdBQUdDLE9BQU8sQ0FBQ1EsT0FBTyxFQUFFLFFBQVEsQ0FBUEMsUUFBUSxFQUFLLENBQUM7UUFDL0MsR0FBSyxDQUFDQyxLQUFLLEdBQUcsSUFBSTtRQUVsQmQsUUFBUSxDQUFDYyxLQUFLLEVBQUVELFFBQVE7SUFDMUIsQ0FBQztJQUVEVixRQUFRLENBQUNZLEVBQUUsQ0F2RHVCLFVBQWMsUUF1RDdCLFFBQVEsQ0FBUEQsS0FBSyxFQUFLLENBQUM7UUFDN0IsR0FBSyxDQUFDRCxRQUFRLEdBQUcsSUFBSTtRQUVyQmIsUUFBUSxDQUFDYyxLQUFLLEVBQUVELFFBQVE7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQ1YsUUFBUTtBQUNqQixDQUFDO2VBRWMsQ0FBQztJQUNkUixHQUFHLEVBQUhBLEdBQUc7SUFDSFcsSUFBSSxFQUFKQSxJQUFJO0lBQ0pGLE9BQU8sRUFBUEEsUUFBTztBQUNULENBQUMifQ==