"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.overwrite = overwrite;
exports.underwrite = underwrite;
exports.portFromHost = portFromHost;
exports.secureFromHost = secureFromHost;
exports.hostnameFromHost = hostnameFromHost;
exports.queryStringFromQuery = queryStringFromQuery;
exports.urlFromHostURIAndQuery = urlFromHostURIAndQuery;
exports.default = void 0;
var _array = require("../utilities/array");
var _constants = require("../constants");
var _characters = require("../characters");
function overwrite(headers, name, value) {
    var ownPropertyNames = Object.getOwnPropertyNames(headers), lowerCaseName = name.toLowerCase(), overwritten = ownPropertyNames.some(function(ownPropertyName) {
        var lowerCaseOwnPropertyName = ownPropertyName.toLowerCase();
        if (lowerCaseOwnPropertyName === lowerCaseName) {
            headers[ownPropertyName] = value;
            return true;
        }
    });
    if (!overwritten) {
        headers[name] = value;
    }
}
function underwrite(headers, name, value) {
    var ownPropertyNames = Object.getOwnPropertyNames(headers), lowercaseName = name.toLowerCase(), lowerCaseOwnPropertyNames = ownPropertyNames.map(function(ownPropertyName) {
        var lowerCaseOwnPropertyName = ownPropertyName.toLowerCase();
        return lowerCaseOwnPropertyName;
    }), lowerCaseOwnPropertyNamesIncludesLowercaseName = lowerCaseOwnPropertyNames.includes(lowercaseName);
    if (!lowerCaseOwnPropertyNamesIncludesLowercaseName) {
        headers[name] = value;
    }
}
function portFromHost(host) {
    var port;
    var matches = host.match(/^https?:\/\/([^\/]+)/), secondMatch = (0, _array).second(matches), index = secondMatch.indexOf(_characters.COLON_CHARACTER);
    if (index === -1) {
        var secure = secureFromHost(host);
        port = secure ? 443 : 80; ///
    } else {
        var start = index + 1, portString = secondMatch.substring(start);
        port = Number(portString);
    }
    return port;
}
function secureFromHost(host) {
    var secure = /^https:\/\//.test(host);
    return secure;
}
function hostnameFromHost(host) {
    var matches = host.match(/^https?:\/\/([^:\/]+)/), secondMatch = (0, _array).second(matches), hostname = secondMatch; ///
    return hostname;
}
function queryStringFromQuery(query) {
    var names = Object.keys(query), namesLength = names.length, lastIndex = namesLength - 1, queryString1 = names.reduce(function(queryString, name, index) {
        var value = query[name], encodedName = encodeURIComponent(name), encodedValue = encodeURIComponent(value), ampersandOrNothing = index !== lastIndex ? _characters.AMPERSAND_CHARACTER : _constants.EMPTY_STRING;
        queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
        return queryString;
    }, _constants.EMPTY_STRING);
    return queryString1;
}
function urlFromHostURIAndQuery(host, uri, query) {
    var queryString = queryStringFromQuery(query), url = queryString === _constants.EMPTY_STRING ? "".concat(host).concat(uri) : "".concat(host).concat(uri, "?").concat(queryString);
    return url;
}
var _default = {
    overwrite: overwrite,
    underwrite: underwrite,
    portFromHost: portFromHost,
    secureFromHost: secureFromHost,
    hostnameFromHost: hostnameFromHost,
    queryStringFromQuery: queryStringFromQuery,
    urlFromHostURIAndQuery: urlFromHostURIAndQuery
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,