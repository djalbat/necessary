"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.onETX = onETX;
exports.prompt = prompt;
exports.default = void 0;
var _asynchronous = require("../utilities/asynchronous");
var _encodings = require("../encodings");
var _constants = require("../constants");
var _defaults = require("../defaults");
var _characters = require("../characters");
function onETX(handler) {
    var offExt = function offExt() {
        process.stdin.removeListener(_constants.DATA, listener);
    };
    var listener = function listener(character) {
        if (character === _characters.ETX_CHARACTER) {
            handler();
        }
    };
    if (process.stdin.setRawMode) {
        var rawMode = true, encoding = _encodings.UTF8_ENCODING;
        process.stdin.setRawMode(rawMode);
        process.stdin.setEncoding(encoding);
        process.stdin.addListener(_constants.DATA, listener);
        process.stdin.resume();
        return offExt;
    }
}
function prompt(options, callback) {
    var _answer = options.answer, answer1 = _answer === void 0 ? null : _answer;
    if (answer1 !== null) {
        callback(answer1);
        return;
    }
    var _attempts = options.attempts, attempts = _attempts === void 0 ? _defaults.DEFAULT_ATTEMPTS : _attempts, context = {
        answer: answer1,
        options: options,
        attempts: attempts
    };
    (0, _asynchronous).whilst(attempt, function() {
        var answer = context.answer;
        callback(answer);
    }, context);
}
var _default = {
    onETX: onETX,
    prompt: prompt
};
exports.default = _default;
function attempt(next, done, context) {
    var callback = function callback(answer) {
        var valid = validationFunction ? validationFunction(answer) : validationPattern.test(answer);
        if (valid) {
            Object.assign(context, {
                answer: answer
            });
            done();
        } else {
            console.log(errorMessage);
            Object.assign(context, {
                attempts: attempts
            });
            next();
        }
    };
    var attempts = context.attempts;
    var terminate = (attempts--) === 0;
    if (terminate) {
        done();
        return;
    }
    var options = context.options, _hidden = options.hidden, hidden = _hidden === void 0 ? false : _hidden, _encoding = options.encoding, encoding = _encoding === void 0 ? _defaults.DEFAULT_ENCODING : _encoding, description = options.description, errorMessage = options.errorMessage, _initialAnswer = options.initialAnswer, initialAnswer = _initialAnswer === void 0 ? _defaults.DEFAULT_INITIAL_ANSWER : _initialAnswer, _validationPattern = options.validationPattern, validationPattern = _validationPattern === void 0 ? null : _validationPattern, _validationFunction = options.validationFunction, validationFunction = _validationFunction === void 0 ? null : _validationFunction;
    input(initialAnswer, hidden, description, encoding, callback);
}
function input(initialAnswer, hidden, description, encoding, callback) {
    var answer = initialAnswer; ///
    hidden ? hiddenInput(answer, description, encoding, callback) : visibleInput(answer, description, encoding, callback);
}
function hiddenInput(answer, description, encoding, callback) {
    var rawMode = true;
    process.stdout.write(description);
    process.stdin.setEncoding(encoding);
    process.stdin.setRawMode(rawMode);
    process.stdin.on(_constants.DATA, listener);
    process.stdin.resume();
    function listener(data) {
        var character = data.toString(encoding);
        switch(character){
            case _characters.LINE_FEED_CHARACTER:
            case _characters.CARRIAGE_RETURN_CHARACTER:
                process.stdout.write(_characters.LINE_FEED_CHARACTER);
                process.stdin.removeListener(_constants.DATA, listener);
                process.stdin.pause();
                callback(answer);
                break;
            case _characters.BACKSPACE_CHARACTER:
                answer = answer.slice(0, answer.length - 1);
                break;
            default:
                answer += character;
                break;
            case _characters.ETX_CHARACTER:
                console.log(_characters.CTRL_C_CHARACTER);
                process.exit();
        }
    }
}
function visibleInput(answer2, description, encoding, callback) {
    var listener = function listener(data) {
        var answer = data.replace(/\n$/, _constants.EMPTY_STRING);
        process.stdin.pause();
        callback(answer);
    };
    process.stdout.write(description);
    process.stdout.write(answer2);
    process.stdin.setEncoding(encoding);
    process.stdin.once(_constants.DATA, listener);
    process.stdin.resume();
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,